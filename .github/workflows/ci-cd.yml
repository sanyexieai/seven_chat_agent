name: AI Agent System CI and Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  UV_VERSION: '0.1.0'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          .venv
          ~/.cache/uv
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: agent-ui/package-lock.json

    - name: Install Node.js dependencies
      working-directory: agent-ui
      run: npm ci

    - name: Build frontend
      working-directory: agent-ui
      run: |
        export DISABLE_ESLINT_PLUGIN=true
        npm run build

    - name: Update Frontend Config for Production
      run: |
        mkdir -p agent-ui/build/config
        cat > agent-ui/build/config/config.json << 'EOF'
        {
          "api": {
            "backend_port": 32004,
            "frontend_port": 32004,
            "host": "${{ secrets.SSH_HOST }}",
            "base_path": "/api"
          },
          "app": {
            "name": "Seven Chat Agent",
            "version": "1.0.0"
          }
        }
        EOF
        echo "Production config created:"
        cat agent-ui/build/config/config.json
    
    # 导出requirements.txt到后端目录
    - name: Export requirements.txt to backend directory
      run: |
        cd agent-backend
        pip install uv
        uv export --no-hashes --format requirements.txt > requirements.txt
        sed -i '/^-e ./d' requirements.txt 

    - name: Deploy Backend Code
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        source: "agent-backend/*"
        target: "/vol1/1000/project/agent-system/backend/"
        strip_components: 1
        rm: true


    - name: Deploy Frontend to Backend Static Directory
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        source: "agent-ui/build/*"
        target: "/vol1/1000/project/agent-system/backend/static/"
        strip_components: 2
        rm: true

    - name: Build and Run Docker
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        script: |
          cd /vol1/1000/project/agent-system/backend

          # 创建 Dockerfile
          cat > Dockerfile << 'EOF'
          FROM python:3.11-slim
          WORKDIR /app
          COPY . .
          RUN pip install --no-deps --no-cache-dir -r requirements.txt
          EXPOSE 8000
          CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
          EOF

          # 停止旧容器
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker stop agent-system || true
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker rm agent-system || true

          # 重新构建镜像
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker build --no-cache -t agent-system -f Dockerfile .

          # 启动新容器
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker run -d \
            --name agent-system \
            -p 32004:8000 \
            -v /vol1/1000/project/agent-system/backend:/app \
            -e DATABASE_URL=sqlite:///./data/agent_system.db \
            --restart unless-stopped \
            agent-system

          # 等待容器启动
          sleep 10

          # 检查容器状态和文件结构
          echo "=== 容器状态 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker ps
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker logs agent-system --tail 50
          
          echo "=== 容器内文件结构 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker exec agent-system ls -la /app
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker exec agent-system ls -la /app/static
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker exec agent-system ls -la /app/static/config
          
          echo "=== 检查配置文件 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker exec agent-system cat /app/static/config/config.json

          # 健康检查（最多重试 5 次）
          for i in {1..5}; do
            if curl -sf http://localhost:32004/api/health; then
              echo "服务已启动"
              exit 0
            fi
            echo "等待服务启动..."
            sleep 5
          done

          echo "服务启动失败"
          exit 1
