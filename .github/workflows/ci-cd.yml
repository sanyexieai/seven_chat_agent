name: AI Agent System CI and Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  UV_VERSION: '0.1.0'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: latest

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          .venv
          ~/.cache/uv
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: agent-ui/package-lock.json

    - name: Install Node.js dependencies
      working-directory: agent-ui
      run: npm ci





    - name: Build frontend
      working-directory: agent-ui
      run: |
        export DISABLE_ESLINT_PLUGIN=true
        npm run build

    - name: Update Frontend Config for Production
      run: |
        # 创建生产环境的配置文件 - 前后端使用同一端口
        mkdir -p agent-ui/build/config
        cat > agent-ui/build/config/config.json << 'EOF'
        {
          "api": {
            "backend_port": 32004,
            "frontend_port": 32004,
            "host": "${{ secrets.SSH_HOST }}",
            "base_path": "/api"
          },
          "app": {
            "name": "Seven Chat Agent",
            "version": "1.0.0"
          }
        }
        EOF
        
        echo "Production config created (unified port):"
        cat agent-ui/build/config/config.json

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r agent-ui/build deployment/frontend
        cp -r agent-backend deployment/backend
        cp README.md deployment/
        cp pyproject.toml deployment/
        
        tar -czf agent-system-deployment.tar.gz -C deployment .
        
        echo "Deployment package created:"
        ls -la deployment/
        ls -la

    - name: Deploy Backend to Server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        source: "agent-backend/*"
        target: "/vol1/1000/project/agent-system/backend/"
        strip_components: 1
        rm: true

    - name: Deploy Frontend to Backend Directory
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        source: "agent-ui/build/*"
        target: "/vol1/1000/project/agent-system/backend/static/"
        strip_components: 2
        rm: true



    - name: Build and Run Docker
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        script: |
          cd /vol1/1000/project/agent-system/
          
                     # 创建 docker-compose.yml - 前后端统一端口
           cat > docker-compose.yml << 'EOF'
           version: '3.8'
           services:
             agent-backend:
               build: ./backend
               ports:
                 - "32004:8000"
               volumes:
                 - ./backend:/app
                 - ./data:/app/data
               environment:
                 - DATABASE_URL=sqlite:///./data/agent_system.db
               restart: unless-stopped
           EOF
          
          
          
                     # 创建后端 Dockerfile - 支持静态文件
           cat > backend/Dockerfile << 'EOF'
           FROM python:3.11-slim
           
           WORKDIR /app
           
           RUN pip install uv
           
           COPY pyproject.toml uv.lock ./
           RUN uv sync --frozen
           
           COPY . .
           
           # 确保静态文件目录存在
           RUN mkdir -p static
           
           EXPOSE 8000
           
           CMD ["uv", "run", "uvicorn", "main_static:app", "--host", "0.0.0.0", "--port", "8000"]
           EOF
           
           # 创建支持静态文件的后端主文件
           cat > backend/main_static.py << 'EOF'
           from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException, status
           from fastapi.middleware.cors import CORSMiddleware
           from fastapi.staticfiles import StaticFiles
           from fastapi.responses import StreamingResponse, FileResponse
           from contextlib import asynccontextmanager
           import uvicorn
           import asyncio
           import json
           import uuid
           from typing import Dict, List, Any
           import logging
           import os
           
           # 导入路由
           from api.agents import router as agents_router
           from api.sessions import router as sessions_router
           from api.chat import router as chat_router
           from api.mcp import router as mcp_router
           from api.flows import router as flows_router
           from api.llm_config import router as llm_config_router
           from api.knowledge_base import router as knowledge_base_router
           
           # 导入数据库和智能体管理器
           from database.database import engine, Base, get_db, SessionLocal
           from database.migrations import run_migrations, create_default_agents
           from agents.agent_manager import AgentManager
           from utils.log_helper import get_logger
           
           # 配置日志
           logging.basicConfig(level=logging.INFO)
           logger = get_logger("main")
           
           # 运行数据库迁移
           logger.info("开始数据库迁移...")
           from database.database import init_db
           init_db()
           logger.info("数据库迁移完成")
           
           # 全局变量
           agent_manager = None
           active_connections: Dict[str, WebSocket] = {}
           
           @asynccontextmanager
           async def lifespan(app: FastAPI):
               """应用生命周期管理"""
               global agent_manager
               
               # 启动时初始化
               logger.info("应用启动中...")
               agent_manager = AgentManager()
               await agent_manager.initialize()
               logger.info("应用启动完成")
               
               yield
               
               # 关闭时清理
               logger.info("应用关闭中...")
               if agent_manager:
                   await agent_manager.cleanup()
               logger.info("应用关闭完成")
           
           # 创建FastAPI应用
           app = FastAPI(
               title="Seven Chat Agent API",
               description="多智能体聊天系统API",
               version="1.0.0",
               lifespan=lifespan
           )
           
           # 配置CORS
           app.add_middleware(
               CORSMiddleware,
               allow_origins=["*"],
               allow_credentials=True,
               allow_methods=["*"],
               allow_headers=["*"],
           )
           
           # 挂载静态文件
           app.mount("/", StaticFiles(directory="static", html=True), name="static")
           
           # 注册API路由 (需要在静态文件挂载之后)
           app.include_router(agents_router, prefix="/api")
           app.include_router(sessions_router, prefix="/api")
           app.include_router(chat_router, prefix="/api")
           app.include_router(mcp_router, prefix="/api")
           app.include_router(flows_router, prefix="/api")
           app.include_router(llm_config_router, prefix="/api")
           app.include_router(knowledge_base_router, prefix="/api")
           
           @app.get("/api/")
           async def root():
               """API根路径"""
               return {
                   "message": "Seven Chat Agent API",
                   "version": "1.0.0",
                   "status": "running"
               }
           
           @app.get("/api/health")
           async def health_check():
               """健康检查"""
               return {
                   "status": "healthy",
                   "timestamp": "2024-01-01T00:00:00Z"
               }
           
           # 其他路由和WebSocket处理...
           # 这里需要复制原main.py中的其他内容
           EOF
           
           # 更新Dockerfile使用新的主文件
           sed -i 's/main:app/main_static:app/g' backend/Dockerfile
          
          # 显示当前目录结构
          echo "=== 当前目录结构 ==="
          ls -la
          echo "=== 后端目录结构 ==="
          ls -la backend/
          
          # 停止并删除旧容器
          echo "=== 停止旧容器 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose down || true
          
          # 构建新镜像
          echo "=== 构建 Docker 镜像 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose build --no-cache
          
          # 检查镜像是否构建成功
          echo "=== 检查 Docker 镜像 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker images | grep agent-system || echo "镜像未找到"
          
          # 启动容器
          echo "=== 启动容器 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose up -d
          
          # 等待服务启动
          echo "=== 等待服务启动 ==="
          sleep 30
          
          # 检查服务状态
          echo "=== 检查容器状态 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose ps
          
          # 检查容器日志
          echo "=== 检查容器日志 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose logs agent-backend
          
          # 检查端口是否正常监听
          echo "=== 检查端口监听 ==="
          netstat -tlnp | grep :32004 || echo "Port 32004 not listening"
          
          # 测试服务是否响应
          echo "=== 测试服务响应 ==="
          curl -f http://localhost:32004/api/health || echo "服务未响应" 