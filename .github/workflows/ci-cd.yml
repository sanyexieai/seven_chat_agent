name: AI Agent System CI and Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  UV_VERSION: '0.1.0'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: latest

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          .venv
          ~/.cache/uv
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: agent-ui/package-lock.json

    - name: Install Node.js dependencies
      working-directory: agent-ui
      run: npm ci





    - name: Build frontend
      working-directory: agent-ui
      run: |
        export DISABLE_ESLINT_PLUGIN=true
        npm run build

    - name: Update Frontend Config for Production
      run: |
        # 创建生产环境的配置文件 - 前后端使用同一端口
        mkdir -p agent-ui/build/config
        cat > agent-ui/build/config/config.json << 'EOF'
        {
          "api": {
            "backend_port": 32004,
            "frontend_port": 32004,
            "host": "${{ secrets.SSH_HOST }}",
            "base_path": "/api"
          },
          "app": {
            "name": "Seven Chat Agent",
            "version": "1.0.0"
          }
        }
        EOF
        
        echo "Production config created (unified port):"
        cat agent-ui/build/config/config.json

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r agent-ui/build deployment/frontend
        cp -r agent-backend deployment/backend
        cp README.md deployment/
        cp pyproject.toml deployment/
        
        tar -czf agent-system-deployment.tar.gz -C deployment .
        
        echo "Deployment package created:"
        ls -la deployment/
        ls -la

    - name: Copy Dependencies to Backend
      run: |
        cp pyproject.toml agent-backend/
        cp uv.lock agent-backend/
        echo "依赖文件已复制到 backend 目录"

    - name: Deploy Backend Code
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        source: "agent-backend/*"
        target: "/vol1/1000/project/agent-system/backend/"
        strip_components: 1
        rm: true

    - name: Deploy Frontend to Backend Directory
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        source: "agent-ui/build/*"
        target: "/vol1/1000/project/agent-system/backend/static/"
        strip_components: 2
        rm: true



    - name: Build and Run Docker
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        script: |
          cd /vol1/1000/project/agent-system/
          
          # 创建后端 Dockerfile - 支持静态文件
          cat > backend/Dockerfile << 'EOF'
          FROM python:3.11-slim
          
          WORKDIR /app
          
          # 使用 uv 安装依赖
          RUN pip install uv
          COPY backend/pyproject.toml backend/uv.lock ./
          RUN uv sync --frozen
          
          # 复制后端代码
          COPY backend/ .
          
          # 确保静态文件目录存在
          RUN mkdir -p static
          
          EXPOSE 8000
          
          CMD ["uv", "run", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
          EOF
          
          
          # 停止并删除旧容器
          echo "=== 停止旧容器 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker stop agent-system || true
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker rm agent-system || true
          
          # 强制重新构建镜像（不使用缓存）
          echo "=== 强制重新构建 Docker 镜像 ==="
          if echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker build --no-cache -t agent-system -f backend/Dockerfile .; then
            echo "Docker 镜像构建成功"
          else
            echo "Docker 镜像构建失败，退出"
            exit 1
          fi
          
          # 检查镜像是否构建成功
          echo "=== 检查 Docker 镜像 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker images | grep agent-system
          
          # 启动容器
          echo "=== 启动容器 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker run -d \
            --name agent-system \
            -p 32004:8000 \
            -v /vol1/1000/project/agent-system/data:/app/data \
            -e DATABASE_URL=sqlite:///./data/agent_system.db \
            --restart unless-stopped \
            agent-system
          
          # 等待服务启动
          echo "=== 等待服务启动 ==="
          sleep 30
          
          # 检查服务状态
          echo "=== 检查容器状态 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker ps | grep agent-system
          
          # 检查容器日志
          echo "=== 检查容器日志 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker logs agent-system
          
          # 检查容器内文件
          echo "=== 检查容器内文件 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker exec agent-system ls -la /app/ || echo "无法执行容器命令"
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker exec agent-system ls -la /app/static/ 2>/dev/null || echo "static目录不存在"
          
          # 检查 main.py 内容
          echo "=== 检查 main.py 内容 ==="
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker exec agent-system head -20 /app/main.py || echo "无法读取 main.py"
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker exec agent-system grep -n "环境检测" /app/main.py || echo "main.py 中没有环境检测代码"
          
          # 检查端口是否正常监听
          echo "=== 检查端口监听 ==="
          netstat -tlnp | grep :32004 || echo "Port 32004 not listening"
          
          # 测试服务是否响应
          echo "=== 测试服务响应 ==="
          curl -f http://localhost:32004/api/health || echo "服务未响应"
          curl -f http://localhost:32004/health || echo "本地路径也不响应" 